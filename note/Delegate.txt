

[iOS] Delegate 패턴이란 무엇일까?

##### Design Pattern #####

✨ Delegate 패턴이 대체 뭐야?
Delegate 패턴은 iOS 개발에서 자주 사용되는 유명한 디자인 패턴이다.
Delegate란 단어는 '위임하다' 라는 사전적 의미를 갖고 있다.
여기서는 '위임자' 라고 생각하면 편할 것 같다.
Delegate 패턴은 delegate, 즉 위임자를 갖고 있는 객체가 다른 객체에게 자신의 일을 위임하는 형태의 디자인 패턴이다.


🌆 https://velog.velcdn.com/images%2Fzooneon%2Fpost%2F1023ca4f-958e-4cbc-a0a4-d2ce57517b53%2Fimage.png

changeUI() 함수를 갖는 ChangeUIDelegate 프로토콜을 먼저 만들어주었다.
그리고 delegate 변수를 선언해주었는데, 이 변수의 자료형은 ChangeUIDelegate 프로토콜로 선언하였다.
이로써 delegate 변수는 일을 위임할 준비가 되었다.
clickButtonTapped() 메서드에는 Second View에서 Click 버튼을 누를 경우 앞서 선언한 delegate 변수를 통해 위임 받은 객체에서 changeUI() 를 실행하도록 하였다.


🌆 https://velog.velcdn.com/images%2Fzooneon%2Fpost%2Ff612cc07-2720-4708-8e54-01af0a276f14%2Fimage.png

First View의 Next 버튼에는 nextButtonTapped() 메서드를 만들어주었다.
nextButtonTapped() 메서드에서는 Second View를 찾아서 보여주고 Second View의 delegate 변수와 연결해주는 코드가 있다.
앞서 설명했듯이, FirstViewController가 ChangeUIDelegate 프로토콜을 채택했기 때문에 형변환이 가능하여 self를 사용하여 연결해주었다.
ChangeUIDelegate를 채택한 FirstViewController에는 위임자가 메서드를 호출하였을 때(위의 경우에서는 Second View에서 Click버튼을 누른 경우) 실행할 changeUI() 함수를 작성해주어야 한다.
이렇게 작성한 함수를 통해 Second View에서 Click 버튼을 눌러 일을 시키면 First View에서 그 일을 대신 수행하는 것이다.
여기서 Second View의 위임자는 일을 시키기만 할 뿐, 어떤 일을 하는지에 대한 구체적인 내용은 모른다.
이것이 Delegate 패턴의 장점이다.
이게 왜 대체 장점인가에 대해서는 Delegate 패턴을 사용하는 이유에서 이야기해보겠다.


💡 Delegate 패턴은 왜 사용할까?
위의 예제들에서 위임자들은 그저 일을 시킬 뿐, 일을 어떻게 처리해야하는지는 모른다.
일을 처리하는 방법은 그 일을 수행하는 객체에 구현되어 있다.
이미 눈치 챈 사람들도 있겠지만, 이렇게 작성하면 코드를 재사용하고 유지보수하기 쉬워진다.
어떤 일을 해야 하는지를 정해놓기만 하고, 상황에 맞는 코드를 작성하면 된다.
예를 들어 우리가 어떤 작업을 처리해야 하는데, 동일한 작업인데도 불구하고 객체마다 다른 내용을 처리해야한다고 생각해보자.
이럴 경우 동일한 작업에 대해서는 함수를 전달하기만 하고, 각각의 내용은 전달 받은 객체에서 처리하기만 하면 된다.
또한 작업을 전달할 때 공통된 부분을 제외하고 처리해야 하는 부분만을 전달하여 처리할 수도 있다.


🔚 "Delegate는 어떤 객체가 해야 하는 일을 부분적으로 확장해서 대신 처리를 한다."



[참고 블로그] https://velog.io/@zooneon/Delegate-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C



🔁 Delegate Pattern이란?
델리게이트 패턴은 보통 “객체가 자신의 책임을 다른 객체에게 위임(delegate)하는 디자인 패턴”이라고 설명된다.
예를 들어, 테이블뷰는 셀을 탭했을 때 어떤 행동을 할지에 대한 책임을 뷰컨트롤러에게 UITableViewDelegate를 사용해 위임한다.
테이블뷰 외에도 콜렉션뷰, 텍스트필드 등 많은 UI요소들이 델리게이트 패턴을 사용해 다른 객체에게 책임을 위임하고 있다.
왜 굳이 “위임”을 하는 것일까?


🔁 UI요소에서의 Delegate Pattern
사용자가 테이블뷰의 셀을 탭하는 상황을 예로 들어보자.
셀을 탭하면 테이블뷰는 탭 이벤트를 받는다. 테이블뷰가 탭 이벤트를 받으면 delegate의 didSelectRowAt 메소드를 실행시킨다. 이벤트를 받았을 때 어떤 행동을 할 것인지를 delegate에게 위임한 것이다.
보통은 ViewController에 tableView.delegate = self와 같은 코드를 작성해 ViewController self, 즉 ViewController의 인스턴스 자신을 위임자(delegate)로 설정하고, didSelectRowAt 메소드에 셀을 탭했을 때 어떤 행동을 할지를 정의한다.
테이블뷰가 알아서 다 하면 될 것 같은데 왜 굳이 다른 객체에게 위임을 해주는 걸까?
바로 우리가 UITableView의 내부 코드를 수정할 수 없기 때문이다.
셀이 탭되었을 때 어떤 행동을 할지는 상황에 따라 다르기 때문에 개발자가 코드를 작성해야 한다. 하지만 우리는 애플이 숨겨놓은 테이블뷰 안의 코드를 수정할 수 없다. 따라서 다른 객체에서 해당 코드를 작성해준 뒤, 테이블뷰가 그 객체의 코드를 호출해줘야 한다.
이 때 테이블뷰와 객체를 연결해주는 방식이 Delegate Pattern인 것이다.


⚠️ 주의할 점: Strong Reference Cycle
예제 코드를 보면 delegate 프로퍼티를 정의할 때 weak로 선언한 것을 확인할 수 있다.
두 개의 클래스를 델리게이트 패턴을 사용해 연결할 경우, Strong Reference Cycle이 생길 수 있으므로 주의해야 한다.
delegating 객체는 delegate 프로퍼티를 통해 상대 객체를 강하게 참조하고 있고, delegate 객체 역시 delegating 객체를 강하게 참조하고 있기 때문에 Strong Reference Cycle이 생기게 되는 것이다.
delegate 프로퍼티를 선언할 때는 weak로 선언하거나 delegate를 담당하는 별도의 객체를 생성하는 등의 방식으로 Strong Reference Cycle을 피할 수 있다.
예를 들어 두개의 뷰컨트롤러 사이에 데이터 전달을 위해 델리게이트 패턴을 사용한 경우, delegating 객체는 delegate프로퍼티를 통해 상대 객체를 참조하고 있고, delegate 객체도 프로퍼티 등을 통해 delegating 객체를 참조하고 있어 서로를 강하게 참조하고 있게 된다.
이렇게 되면 하나의 뷰컨트롤러가 팝돼서 사라진다고 해도 메모리에서 해제되지 않아 메모리 누수가 생긴다!!!!





